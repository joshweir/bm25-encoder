'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
exports.BM25Encoder = void 0;
const fs_1 = require('fs');
const types_1 = require('./types');
const tokenizer_1 = require('./tokenizer');
const mm3_1 = require('./mm3');
const stopwords_1 = require('./stopwords');
const punctuation_1 = require('./punctuation');
class BM25Encoder {
  constructor(props) {
    var _a, _b, _c, _d, _e, _f;
    this.props = {
      b: (_a = props === null || props === void 0 ? void 0 : props.b) !== null && _a !== void 0 ? _a : 0.75,
      k1: (_b = props === null || props === void 0 ? void 0 : props.k1) !== null && _b !== void 0 ? _b : 1.2,
      lowerCase:
        (_c = props === null || props === void 0 ? void 0 : props.lowerCase) !== null && _c !== void 0 ? _c : true,
      removePunctuation:
        (_d = props === null || props === void 0 ? void 0 : props.removePunctuation) !== null && _d !== void 0
          ? _d
          : true,
      removeStopwords:
        (_e = props === null || props === void 0 ? void 0 : props.removeStopwords) !== null && _e !== void 0
          ? _e
          : true,
      tokenizer:
        (_f = props === null || props === void 0 ? void 0 : props.tokenizer) !== null && _f !== void 0
          ? _f
          : new tokenizer_1.Tokenizer(),
      docFreq: {},
      nDocs: 0,
      avgdl: 0,
    };
    this.stopwords = (0, stopwords_1.getStopwords)();
    this.punctuation = (0, punctuation_1.getPunctuation)();
  }
  fit(corpus) {
    let nDocs = 0;
    let sumDocLen = 0;
    const docFreqCounter = {};
    for (const doc of corpus) {
      if (typeof doc !== 'string') {
        throw new Error('corpus must be a list of strings');
      }
      const { indices, tf } = this.tf(doc);
      if (indices.length === 0) {
        continue;
      }
      nDocs += 1;
      sumDocLen += tf.reduce((sum, freq) => sum + freq, 0);
      // Count the number of documents that contain each token
      for (const index of indices) {
        docFreqCounter[index] = (docFreqCounter[index] || 0) + 1;
      }
    }
    this.props.docFreq = docFreqCounter;
    this.props.nDocs = nDocs;
    this.props.avgdl = sumDocLen / nDocs;
    return this;
  }
  encode(input) {
    if (!Object.keys(this.props.docFreq).length || !this.props.nDocs || !this.props.avgdl) {
      throw new Error('BM25Encoder has not been fitted yet');
    }
    const { indices, tf: docTf } = this.tf(input);
    const tf = [...docTf];
    const tfSum = tf.reduce((sum, freq) => sum + freq, 0);
    const tfNormed = tf.map(
      (t) => t / (this.props.k1 * (1.0 - this.props.b + this.props.b * (tfSum / this.props.avgdl)) + t),
    );
    return {
      indices,
      values: tfNormed,
    };
  }
  encodeQuery(input) {
    if (!Object.keys(this.props.docFreq).length || !this.props.nDocs || !this.props.avgdl) {
      throw new Error('BM25Encoder has not been fitted yet');
    }
    const { indices, tf: queryTf } = this.tf(input);
    const df = indices.map((idx) => this.props.docFreq[idx] || 1);
    const idf = df.map((d) => Math.log((this.props.nDocs + 1) / (d + 0.5)));
    const idfSum = idf.reduce((sum, val) => sum + val, 0);
    const idfNorm = idf.map((val) => val / idfSum);
    return {
      indices,
      values: idfNorm,
    };
  }
  dump(path) {
    (0, fs_1.writeFileSync)(path, JSON.stringify(this.getParams()));
  }
  load(path) {
    this.setParams(types_1.bm25EncoderSerializedSchema.validateSync(JSON.parse((0, fs_1.readFileSync)(path, 'utf-8'))));
  }
  getParams() {
    if (!Object.keys(this.props.docFreq).length || !this.props.nDocs || !this.props.avgdl) {
      throw new Error('BM25Encoder has not been fitted yet');
    }
    const { tokenizer: _, ...propsExclTokenizer } = this.props;
    return {
      ...propsExclTokenizer,
      docFreq: {
        indices: Object.keys(this.props.docFreq).map(Number),
        values: Object.values(this.props.docFreq),
      },
    };
  }
  setParams(props) {
    this.props = {
      ...this.props,
      ...props,
    };
    return this;
  }
  tf(text) {
    const counts = {};
    const tokens = this.props.tokenizer
      .tokenize(this.props.lowerCase ? text.toLocaleLowerCase() : text)
      .filter((token) => (this.props.removeStopwords ? !this.stopwords.includes(token) : true))
      .filter((token) => (this.props.removePunctuation ? !this.punctuation.includes(token) : true));
    for (const token of tokens) {
      const hashedToken = this.hashText(token);
      counts[hashedToken] = (counts[hashedToken] || 0) + 1;
    }
    const items = Object.entries(counts);
    const indices = items.map(([idx]) => parseInt(idx, 10));
    const tf = Object.values(counts);
    return { indices, tf };
  }
  hashText(token) {
    return (0, mm3_1.mm3)(token);
  }
}
exports.BM25Encoder = BM25Encoder;
//# sourceMappingURL=data:application/json;base64,
